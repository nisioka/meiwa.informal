{"version":3,"file":"component---src-templates-category-list-tsx-7e961402d4c9f9744dd4.js","mappings":"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","sources":["webpack://gatsby-md-template/./src/components/seo.tsx","webpack://gatsby-md-template/./src/style.tsx","webpack://gatsby-md-template/./src/templates/category-list.tsx"],"sourcesContent":["/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport config from \"../../gatsby-config\"\r\n\r\ntype SeoProps = {\r\n  title: string\r\n  description?: string\r\n  location: Location\r\n  imagePath?: string\r\n  post?: CommonPost\r\n  children?: React.ReactNode\r\n}\r\n\r\nconst Seo = ({\r\n  title,\r\n  description,\r\n  location,\r\n  imagePath,\r\n  post,\r\n  children,\r\n}: SeoProps) => {\r\n  const { siteMetadata } = config as { siteMetadata: SiteMetadata }\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n\r\n  const metaDescription = description || siteMetadata.description\r\n  const fullTitle = isRootPath\r\n    ? siteMetadata.title\r\n    : `${title} | ${siteMetadata.title}`\r\n  const canonicalUrl =\r\n    siteMetadata.siteUrl + location.pathname.replace(/\\/page\\/([0-9])+\\//, \"\")\r\n  const imageUrl = `${siteMetadata.siteUrl}${\r\n    imagePath ? imagePath : \"/favicon.webp\"\r\n  }`\r\n\r\n  function createJsonLd() {\r\n    // JSON-LDの設定\r\n    const author = [\r\n      {\r\n        \"@type\": \"Person\",\r\n        name: siteMetadata.author.name,\r\n        description: siteMetadata.author.summary,\r\n        url: siteMetadata.siteUrl,\r\n        sameAs: [siteMetadata.social.twitter, siteMetadata.social.github],\r\n      },\r\n    ]\r\n\r\n    const publisher = {\r\n      \"@type\": \"Organization\",\r\n      name: siteMetadata.title,\r\n      description: siteMetadata.description,\r\n      logo: {\r\n        \"@type\": \"ImageObject\",\r\n        url: `${siteMetadata.siteUrl}/favicon.webp`,\r\n        width: 512,\r\n        height: 512,\r\n      },\r\n    }\r\n\r\n    let jsonLd = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": isRootPath ? \"webSite\" : \"webPage\",\r\n        inLanguage: \"ja\",\r\n        url: canonicalUrl,\r\n        name: title,\r\n        author: author,\r\n        publisher: publisher,\r\n        image: imageUrl,\r\n        description: metaDescription,\r\n      },\r\n    ]\r\n    if (post) {\r\n      const article = {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"BlogPosting\",\r\n        url: canonicalUrl,\r\n        name: post.title,\r\n        headline: post.title,\r\n        image: {\r\n          \"@type\": \"ImageObject\",\r\n          url: imageUrl,\r\n        },\r\n        description: post.excerpt,\r\n        datePublished: new Date(post.date),\r\n        dateModified: new Date(post.dateModified),\r\n        mainEntityOfPage: {\r\n          \"@type\": \"WebPage\",\r\n          \"@id\": canonicalUrl,\r\n        },\r\n        author: author,\r\n        publisher: publisher,\r\n      }\r\n      // @ts-ignore\r\n      jsonLd = [...jsonLd, article]\r\n    }\r\n    return JSON.stringify(jsonLd)\r\n  }\r\n\r\n  let jsonLd = createJsonLd()\r\n\r\n  return (\r\n    <>\r\n      <html lang=\"ja\" />\r\n      <title>{fullTitle}</title>\r\n      <link rel=\"canonical\" href={canonicalUrl} />\r\n      <script type=\"application/ld+json\">{jsonLd}</script>\r\n\r\n      <meta name=\"description\" content={metaDescription} />\r\n      {imagePath && (\r\n        <>\r\n          <meta property=\"og:image\" content={imageUrl} />\r\n          <meta property=\"og:url\" content={imageUrl} />\r\n          <meta property=\"twitter:image\" content={imageUrl} />\r\n        </>\r\n      )}\r\n      <meta property=\"og:title\" content={fullTitle} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta\r\n        property=\"og:type\"\r\n        content={`${isRootPath ? \"website\" : \"webpage\"}`}\r\n      />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={siteMetadata.social.twitter} />\r\n      <meta name=\"twitter:title\" content={fullTitle} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import styled from \"styled-components\"\r\n\r\nexport const ContentsListHeader = styled.header`\r\n  text-align: center;\r\n\r\n  h1,\r\n  h2 {\r\n    &:after {\r\n      margin: 0 auto;\r\n      content: \"\";\r\n      display: block;\r\n      width: 98%;\r\n      height: 3px;\r\n      background: var(--orange);\r\n    }\r\n  }\r\n`\r\n\r\nexport const ContentsOrderedListWrapper = styled.ol`\r\n  column-count: 1;\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n\r\n  li {\r\n    padding: 5px;\r\n    margin: var(--spacing-1);\r\n    box-sizing: border-box;\r\n    border: 1px solid var(--black);\r\n    border-radius: 5px;\r\n    background-color: #fff;\r\n\r\n    a {\r\n      color: var(--black);\r\n      text-decoration: none;\r\n    }\r\n\r\n    h2 {\r\n      font-size: var(--fontSize-2);\r\n    }\r\n  }\r\n  .thumbnail {\r\n    float: left;\r\n  }\r\n\r\n  @media screen and (min-width: calc(512px + 160px)) {\r\n    column-count: 2;\r\n\r\n    li {\r\n      padding: 15px;\r\n      width: 48%;\r\n\r\n      h2 {\r\n        font-size: var(--fontSize-3);\r\n      }\r\n\r\n      a {\r\n        &:hover h2 {\r\n          text-decoration: underline;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @media screen and (min-width: calc(768px + 330px)) {\r\n    column-count: 3;\r\n\r\n    li {\r\n      width: 32%;\r\n    }\r\n  }\r\n`\r\n\r\nexport const NormalAreaWrapper = styled.div`\r\n  background-color: #fff;\r\n`\r\n","import * as React from \"react\"\r\n\r\nimport { graphql, Link } from \"gatsby\"\r\nimport { PageContext } from \"gatsby/internal\"\r\nimport { convertCategory, mergePosts } from \"../utilFunction\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport { GatsbyImage } from \"gatsby-plugin-image\"\r\nimport { ContentsListHeader, ContentsOrderedListWrapper } from \"../style\"\r\n\r\nconst CategoryList = ({\r\n  pageContext,\r\n  data,\r\n  location,\r\n}: {\r\n  pageContext: PageContext\r\n  data: any\r\n  location: Location\r\n}) => {\r\n  const categoryName = pageContext.category as string\r\n  const posts = mergePosts(data.allMarkdownRemark, data.allFile)\r\n  const title = `【${categoryName}】カテゴリー 一覧`\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      <ContentsListHeader>\r\n        <h1>{title}</h1>\r\n        <p>{posts.length} 記事あります</p>\r\n      </ContentsListHeader>\r\n      <ContentsOrderedListWrapper>\r\n        {posts.map(post => {\r\n          return (\r\n            <li key={post.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <Link to={`/${convertCategory(categoryName)}/${post.slug}`}>\r\n                  <h2>\r\n                    <span>{post.title}</span>\r\n                  </h2>\r\n                  <section>\r\n                    <div>\r\n                      <small>\r\n                        <time>{post.dateModified}</time>\r\n                      </small>\r\n                    </div>\r\n                    <div className=\"thumbnail\">\r\n                      {typeof post.gatsbyImage === \"undefined\" || (\r\n                        <GatsbyImage\r\n                          alt={post.altText}\r\n                          image={post.gatsbyImage}\r\n                          className=\"thumbnail\"\r\n                        />\r\n                      )}\r\n                    </div>\r\n                    <p dangerouslySetInnerHTML={{ __html: post.excerpt }} />\r\n                  </section>\r\n                </Link>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ContentsOrderedListWrapper>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default CategoryList\r\n\r\nexport const Head = ({\r\n  pageContext,\r\n  location,\r\n}: {\r\n  pageContext: PageContext\r\n  location: Location\r\n}) => {\r\n  return (\r\n    <Seo\r\n      title={`【${pageContext.category}】カテゴリー 一覧`}\r\n      description={`【${pageContext.category}】カテゴリーの記事一覧です`}\r\n      location={location}\r\n    />\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query ($category: String) {\r\n    allMarkdownRemark(\r\n      filter: { frontmatter: { category: { eq: $category } } }\r\n    ) {\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          title\r\n          date(formatString: \"YYYY/MM/DD\")\r\n          dateModified(formatString: \"YYYY/MM/DD\")\r\n          description\r\n          featuredImagePath\r\n        }\r\n      }\r\n    }\r\n    allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          childImageSharp {\r\n            gatsbyImageData(\r\n              width: 100\r\n              height: 100\r\n              formats: [AUTO, WEBP, AVIF]\r\n              placeholder: BLURRED\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["_ref","title","description","location","imagePath","post","children","siteMetadata","config","isRootPath","pathname","metaDescription","fullTitle","canonicalUrl","siteUrl","replace","imageUrl","jsonLd","author","name","summary","url","sameAs","social","twitter","github","publisher","logo","width","height","inLanguage","image","article","headline","excerpt","datePublished","Date","date","dateModified","mainEntityOfPage","concat","_toConsumableArray","JSON","stringify","createJsonLd","React","lang","rel","href","type","content","property","ContentsListHeader","styled","header","ContentsOrderedListWrapper","ol","div","pageContext","data","categoryName","category","posts","mergePosts","allMarkdownRemark","allFile","Layout","length","map","key","slug","className","itemType","Link","to","convertCategory","gatsbyImage","GatsbyImage","alt","altText","dangerouslySetInnerHTML","__html","Head","_ref2","Seo"],"sourceRoot":""}